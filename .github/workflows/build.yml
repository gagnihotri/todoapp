name: Build_pipeline
on:
  push:
    branches: [master]

jobs:
  package-frontend:
    name: Build & push Frontend image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
            ${{ runner.os }}-node-

      - name: Run Frontend Tests & Generate Coverage
        run: |
          cd frontend/todo
          npm install
          npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage

      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/todo/coverage
      
      - name: Build Frontend
        id: app-version
        run: |
          cd frontend/todo
          npm run build --prod

          APP_VERSION=$(jq -r .version package.json)
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"          

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: frontend/todo
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ env.APP_VERSION }}
            ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ github.sha }}

  package-backend:
    name: Build & push Backend image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Run Tests & Generate Coverage
        run: |
          cd backend/restful-web-services
          mvn test jacoco:report

      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/restful-web-services/target/site/jacoco

      - name: Upload Compiled Java Classes
        uses: actions/upload-artifact@v4
        with:
          name: backend-classes
          path: backend/restful-web-services/target/classes    

      - name: Build Backend
        id: backend-version
        run: |
          cd backend/restful-web-services
          mvn clean package -DskipTests

          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "BACKEND_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "BACKEND_VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: backend/restful-web-services
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ env.BACKEND_VERSION }}
            ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ github.sha }}
          build-args: |
            RDS_DB_ENDPOINT=${{ secrets.RDS_DB_ENDPOINT }}
            RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}
            RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }}

    outputs:
      BACKEND_VERSION: ${{ steps.backend-version.outputs.BACKEND_VERSION }}

  deploy:
    name: trigger deploy
    runs-on: ubuntu-latest
    needs: [package-backend, package-frontend]
    uses: .github/workflows/deploy.yml
    with: 
      APP_VERSION: ${{ needs.package-frontend.outputs.APP_VERSION}}
      BACKEND_VERSION: ${{ needs.package-backend.outputs.BACKEND_VERSION}}

  sonar-analysis:
    name: SonarQube Analysis
    needs: [package-backend, package-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache SonarQube Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Restore Compiled Java Classes
        uses: actions/download-artifact@v4
        with:
          name: backend-classes
          path: backend/restful-web-services/target/classes

      - name: Restore Backend Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend/restful-web-services/target/site/jacoco

      - name: Restore Frontend Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/todo/coverage

      - name: Run SonarQube Analysis
        run: |
          npx sonar-scanner -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: Check SonarQube Quality Gate
        run: |
          sleep 10
          RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=fullapp_todoapp")

          echo "SonarQube Quality Gate Response:"
          echo "$RESPONSE" | jq .

          STATUS=$(echo "$RESPONSE" | jq -r .projectStatus.status)

          if [[ "$STATUS" != "OK" ]]; then
            echo "❌ Quality Gate Failed!"
            exit 1
          else
            echo "✅ Quality Gate Passed!"
          fi
        shell: bash