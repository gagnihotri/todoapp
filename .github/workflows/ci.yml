name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Maven
        run: sudo apt-get install -y maven

      - name: Build & Test Backend
        run: |
          cd backend/restful-web-services
          mvn clean install -U

      - name: Run Tests & Generate Coverage
        run: |
          cd backend/restful-web-services
          mvn test jacoco:report

      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/restful-web-services/target/site/jacoco

      - name: Upload Compiled Java Classes
        uses: actions/upload-artifact@v4
        with:
          name: backend-classes
          path: backend/restful-web-services/target/classes

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd frontend/todo
          npm install

      - name: Run Frontend Tests & Generate Coverage
        run: |
          cd frontend/todo
          npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage

      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/todo/coverage

  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Restore Compiled Java Classes
        uses: actions/download-artifact@v4
        with:
          name: backend-classes
          path: backend/restful-web-services/target/classes
      
      - name: Restore Frontend Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/todo/coverage

      - name: Restore backend Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend/restful-web-services/target/site/jacoco

      - name: Run SonarQube Analysis
        run: |
          npx sonar-scanner -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: Check SonarQube Quality Gate
        run: |
          sleep 10
          RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=fullapp_todoapp")
          
          echo "SonarQube Quality Gate Response:"
          echo "$RESPONSE" | jq .

          STATUS=$(echo "$RESPONSE" | jq -r .projectStatus.status)

          if [[ "$STATUS" != "OK" ]]; then
            echo "❌ Quality Gate Failed!"
            exit 1
          else
            echo "✅ Quality Gate Passed!"
          fi
        shell: bash
  
  package-backend:
    name: Package Backend
    runs-on: ubuntu-latest
    outputs:
      BACKEND_VERSION: ${{ steps.set-backend-version.outputs.VERSION }}
    #needs: sonar-analysis
    #if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Maven
        run: sudo apt-get install -y maven

      -name: Backend Version
        id: set-backend-version
        run: |
          cd backend/restful-web-services
          echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
  
      - name: Build Backend Docker Image
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          cd backend/restful-web-services
          mvn clean package -DskipTests

          docker build \
            -t ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ VERSION }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ github.sha }} \
            --build-arg RDS_DB_ENDPOINT="${{ secrets.RDS_DB_ENDPOINT }}" \
            --build-arg RDS_DB_PASSWORD="${{ secrets.RDS_DB_PASSWORD }}" \
            --build-arg RDS_DB_USERNAME="${{ secrets.RDS_DB_USERNAME }}" \
            -f ../Dockerfile  .

      - name: Push Backend Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ VERSION }}
          docker push ${{ secrets.DOCKERHUB_REPO }}/backend-app:${{ github.sha }}

  package-frontend:
    name: Package Frontend
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.app-version.outputs.APP_VERSION }}
    #needs: sonar-analysis
    #if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      -name: Frontend Version
        run: echo "APP_VERSION=$(jq -r .version frontend/todo/package.json)" >> $GITHUB_ENV
        id: app-version

      - name: Build Frontend Docker Image
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          cd frontend/todo
          npm install
          npm run build --prod
          docker build \
            -t ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ env.APP_VERSION }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ github.sha }} \
            -f ../Dockerfile . 

      - name: Push Frontend Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ env.APP_VERSION }}
          docker push ${{ secrets.DOCKERHUB_REPO }}/frontend-app:${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [package-backend, package-frontend]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ./ansible/inventory.ini ./ansible/playbook.yaml \
            --extra-vars "db_host=${{ secrets.RDS_DB_ENDPOINT }} /
            db_password=${{ secrets.RDS_DB_PASSWORD }} /
            db_user=${{ secrets.RDS_DB_USERNAME}} /
            app_version=${{ needs.package-frontend.outputs.APP_VERSION}} /
            backend_version=${{ needs.package-backend.outputs.BACKEND_VERSION}}"

